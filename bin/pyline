#!/usr/bin/env python

import sys


def _make():
    def wrap_compile(raw):
        if raw and raw != 'None' and raw != '-':
            try:
                mode = 'eval'
                bc = compile(raw, __file__, mode)
            except SyntaxError:
                mode = 'exec'
                bc = compile(raw, __file__, mode)
            return bc, mode
        return None, None

    codes = map(wrap_compile, sys.argv[1:])
    if len(codes) == 1:
        return (None, None), codes[0], (None, None)
    if len(codes) == 2:
        return codes[0], codes[1], (None, None)
    return codes


def _run():
    (bcinit, bcinitm), (bcline, bclinem), (bcfin, bcfinm) = _make()

    import re, ujson, os
    i = 1
    ll = last = object()
    jl = ujson.loads
    jd = ujson.dumps

    lines = iter(sys.stdin)

    if bcinit:
        out = eval(bcinit, locals())
        if bcinitm == 'eval' and out:
            print out

    try:
        for line in lines:
            l = line = line[:-1]
            words = line.split()

            try:
                out = eval(bcline, locals())
                if bclinem == 'eval' and out:
                    print out
                i += 1
            except IndexError:
                pass
            ll = l
    except KeyboardInterrupt:
        sys.exit(1)


    if bcfin:
        out = eval(bcfin, locals())
        if bcfinm == 'eval' and out:
            print out


_run()
