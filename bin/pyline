#!/usr/bin/env python

import sys, os, re, getopt
from functools import partial

# parse options for module imports
opts, args = getopt.getopt(sys.argv[1:], 'm:')
opts = dict(opts)
if '-m' in opts:
    for imp in opts['-m'].split(','):
        locals()[imp] = __import__(imp.strip())

code_part = partial(compile, sys.argv[1], __file__);
try:
    mode = 'eval'
    code = code_part(mode)
except SyntaxError:
    mode = 'exec'
    code = code_part(mode)

shortcuts = {
    'run': lambda line, cmd: os.system(cmd.replace('%s', line)),
    's': lambda line, char, index=0: line.split(char, index+1)[index],
}

re_compiled = {}
def match(pattern, data):
    r = re_compiled.get(pattern)
    if not r:
        r = re_compiled[pattern] = re.compile(pattern)
    m = r.match(data)
    if m:
        return m.groups()
    return None

i = 1
try:
    for line in sys.stdin:
        l = line = line[:-1]
        words = line.split()
        for shortcut_name, func in shortcuts.items(): locals()[shortcut_name] = partial(func, line)
        try:
            out = eval(code, globals(), locals())
            if mode == 'eval' and out:
                print out
            i += 1
        except IndexError:
            pass
except KeyboardInterrupt:
    sys.exit(1)
